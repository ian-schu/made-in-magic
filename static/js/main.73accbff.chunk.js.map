{"version":3,"sources":["Components/CustomPreview.jsx","Components/CustomInput.jsx","Components/TextOverlay.jsx","Components/EngravingBoard.jsx","App.js","serviceWorker.js","index.js","knife-preview.png"],"names":["CustomPreview","className","alt","id","src","KnifePreview","Component","CustomInput","onChange","this","props","onCheckboxChange","disabled","engravingChecked","placeholder","allowClear","maxLength","children","PropTypes","any","func","onCheck","bool","TextOverlay","embellishment","string","EngravingBoard","bind","state","input","e","setState","target","value","checked","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"8UAIqBA,G,8KAEjB,OACE,yBAAKC,UAAU,aACb,yBAAKC,IAAI,gBAAgBC,GAAG,gBAAgBC,IAAKC,W,GAJdC,c,kCCCtBC,G,8KAYjB,OACE,yBAAKN,UAAU,aACb,yBAAKE,GAAG,cACN,yBAAKA,GAAG,sBACN,kBAAC,IAAD,CAAUK,SAAUC,KAAKC,MAAMC,kBAA/B,cAEF,6BAJF,IAIS,6BACP,kBAAC,IAAD,CACEC,SAAUH,KAAKC,MAAMG,iBACrBC,YAAY,mBACZC,YAAU,EACVP,SAAUC,KAAKC,MAAMF,SACrBQ,UAAW,U,iCAtBnB,MAAO,CACLC,SAAUC,IAAUC,IACpBX,SAAUU,IAAUE,KACpBC,QAASH,IAAUE,KACnBP,iBAAkBK,IAAUI,KAC5BX,iBAAkBO,IAAUE,U,GAPOd,cCDpBiB,G,8KASjB,OACE,yBAAKtB,UAAU,aAAaE,GAAG,iBAC5BM,KAAKC,MAAMc,kB,iCAThB,MAAO,CACLP,SAAUC,IAAUC,IACpBK,cAAeN,IAAUO,Y,GAJUnB,cCEpBoB,G,yDACnB,WAAahB,GAAQ,IAAD,8BAClB,cAAMA,IACDF,SAAW,EAAKA,SAASmB,KAAd,gBAChB,EAAKhB,iBAAmB,EAAKA,iBAAiBgB,KAAtB,gBACxB,EAAKC,MAAQ,CAAEC,MAAO,mBAAoBhB,kBAAkB,GAJ1C,E,qDAOViB,GAAKrB,KAAKsB,SAAS,CAAEF,MAAOC,EAAEE,OAAOC,U,uCAE7BH,GAAKrB,KAAKsB,SAAS,CAAEF,MAAO,GAAIhB,iBAAkBiB,EAAEE,OAAOE,Y,+BAG3E,OACE,yBAAK/B,GAAG,aACN,kBAAC,EAAD,CAAeF,UAAU,cACzB,kBAAC,EAAD,CAAaA,UAAU,YAAYU,iBAAkBF,KAAKE,iBAAkBH,SAAUC,KAAKD,SAAUK,kBAAmBJ,KAAKmB,MAAMf,mBACnI,kBAAC,EAAD,CAAaZ,UAAU,YAAYuB,cAAef,KAAKmB,MAAMC,a,GAjBzBvB,c,OCM7B6B,MARf,WACE,OACE,oCACE,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,mBEzI5BC,EAAOC,QAAU,IAA0B,2C","file":"static/js/main.73accbff.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport KnifePreview from '../knife-preview.png'\nimport './CustomPreview.css'\n\nexport default class CustomPreview extends Component {\n  render () {\n    return (\n      <div className='container'>\n        <img alt=\"Knife preview\" id=\"knife-preview\" src={KnifePreview} />\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { Input, Checkbox } from 'antd'\nimport './CustomInput.css'\n\nexport default class CustomInput extends Component {\n  static get propTypes () {\n    return {\n      children: PropTypes.any,\n      onChange: PropTypes.func,\n      onCheck: PropTypes.func,\n      engravingChecked: PropTypes.bool,\n      onCheckboxChange: PropTypes.func\n    }\n  }\n\n  render () {\n    return (\n      <div className=\"container\">\n        <div id=\"text-input\">\n          <div id=\"engraving-checkbox\">\n            <Checkbox onChange={this.props.onCheckboxChange}>Engraving</Checkbox>\n          </div>\n          <br /> <br />\n          <Input\n            disabled={this.props.engravingChecked}\n            placeholder=\"Nick Papagiorgio\"\n            allowClear\n            onChange={this.props.onChange}\n            maxLength={30}\n          />\n        </div>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport './TextOverlay.css'\n\nexport default class TextOverlay extends Component {\n  static get propTypes () {\n    return {\n      children: PropTypes.any,\n      embellishment: PropTypes.string\n    }\n  }\n\n  render () {\n    return (\n      <div className='text-block' id=\"embellishment\">\n        {this.props.embellishment}\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport CustomPreview from './CustomPreview'\nimport CustomInput from './CustomInput'\nimport TextOverlay from './TextOverlay'\nimport './EngravingBoard.css'\n\nexport default class EngravingBoard extends Component {\n  constructor (props) {\n    super(props)\n    this.onChange = this.onChange.bind(this)\n    this.onCheckboxChange = this.onCheckboxChange.bind(this)\n    this.state = { input: 'Nick Papagiorgio', engravingChecked: false }\n  }\n\n  onChange (e) { this.setState({ input: e.target.value }) }\n\n  onCheckboxChange (e) { this.setState({ input: '', engravingChecked: e.target.checked }) }\n\n  render () {\n    return (\n      <div id=\"container\">\n        <CustomPreview className=\"grid-item\" />\n        <CustomInput className=\"grid-item\" onCheckboxChange={this.onCheckboxChange} onChange={this.onChange} engravingChecked={!this.state.engravingChecked} />\n        <TextOverlay className=\"grid-item\" embellishment={this.state.input}/>\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport EngravingBoard from './Components/EngravingBoard'\nimport './App.css'\n\nfunction App () {\n  return (\n    <>\n      <EngravingBoard />\n    </>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/knife-preview.df57c686.png\";"],"sourceRoot":""}